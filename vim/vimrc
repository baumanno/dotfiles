" Use vim settings instead of vi settings
set nocompatible

set encoding=utf-8

syntax on
filetype plugin indent on

" sensible settings
set tabstop=4		    " Number of spaces that a <Tab> in the file counts for.

set softtabstop=4
 
set shiftwidth=4	    " Number of spaces to use for each step of (auto)indent.
 
set expandtab		    " Use the appropriate number of spaces to insert a <Tab>.
	                    " Spaces are used in indents with the '>' and '<' commands
         	            " and when 'autoindent' is on. To insert a real tab when
                      	" 'expandtab' is on, use CTRL-V <Tab>.
 
set smarttab        	" When on, a <Tab> in front of a line inserts blanks
    	                " according to 'shiftwidth'. 'tabstop' is used in other
            	        " places. A <BS> will delete a 'shiftwidth' worth of space
                    	" at the start of the line.
 
set showcmd         	" Show (partial) command in status line.

set number          	" Show line numbers.

set showmatch       	" When a bracket is inserted, briefly jump to the matching
			            " one. The jump is only done if the match can be seen on the
                    	" screen. The time to show the match can be set with
                    	" 'matchtime'.
 
set hlsearch        	" When there is a previous search pattern, highlight all
                    	" its matches.
 
set incsearch       	" While typing a search command, show immediately where the
                    	" so far typed pattern matches.
 
set ignorecase      	" Ignore case in search patterns.
 
set smartcase       	" Override the 'ignorecase' option if the search pattern
                    	" contains upper case characters.
 
set backspace=2     	" Influences the working of <BS>, <Del>, CTRL-W
                    	" and CTRL-U in Insert mode. This is a list of items,
                    	" separated by commas. Each item allows a way to backspace
                    	" over something.
 
set autoindent      	" Copy indent from current line when starting a new line
                    	" (typing <CR> in Insert mode or when using the "o" or "O"
                    	" command).
 
set textwidth=79    	" Maximum width of text that is being inserted. A longer
                    	" line will be broken after white space to get this width.
 
set formatoptions=c,q,r,t " This is a sequence of letters which describes how
                    	" automatic formatting is to be done.
                    	"
                    	" letter    meaning when present in 'formatoptions'
                    	" ------    ---------------------------------------
                    	" c         Auto-wrap comments using textwidth, inserting
                    	"           the current comment leader automatically.
                    	" q         Allow formatting of comments with "gq".
                    	" r         Automatically insert the current comment leader
                    	"           after hitting <Enter> in Insert mode. 
                    	" t         Auto-wrap text using textwidth (does not apply
                    	"           to comments)
 
set ruler           	" Show the line and column number of the cursor position,
                    	" separated by a comma.
 
set background=dark 	" When set to "dark", Vim will try to use colors that look
                    	" good on a dark background. When set to "light", Vim will
                    	" try to use colors that look good on a light background.
                    	" Any other value is illegal.
 
set mouse=a         	" Enable the use of the mouse.

set autoread        	" Reload files changed outside vim

syntax on           	" Turn on syntax highlighting

let mapleader =','  	" Set mapleader to ,

set nowrap          	" Don't wrap lines

set linebreak       	" Wrap lines at convenient points

set colorcolumn=80 	    " Set the line-end marker to 80 cols (text width 79)

set smartindent

set completeopt=menuone,menu,longest

set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox
set wildmode=longest,list,full
set wildmenu
set completeopt+=longest

set t_Co=256

set cmdheight=1

" Turn off swap-files
set noswapfile
set nobackup
set nowb

" autowrite on :make
set autowrite

" Persistent undo
" Keeps undo history across sessions by storing in history file.
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" Scrolling
" Start scrolling when we're 5 lines away from margins
set scrolloff=5 
set sidescrolloff=15
set sidescroll=1

map <C-n> :cnext<CR>
map <C-h> :cprev<CR>
nnoremap <leader>a :cclose<CR>

" Airline
set laststatus=2
let g:airline_powerline_fonts=1

" YouCompleteMe
let g:ycm_python_binary_path = 'python'
let g:ycm_key_list_previous_completion = ['<C-Tab>', '<Up>']
nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>d :YcmCompleter GetDoc<CR>
nnoremap <leader>r :YcmCompleter RefactorRename

" Syntastic
map <Leader>s :SyntasticToggleMode<CR>
let g:syntastic_haskell_checkers = ['hlint', 'hdevtools']
let g:syntastic_haskell_hdevtools_args = '-g-isrc -g-Wall -g-Werr'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" Ultisnips
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" Ack
let g:ackprg = 'ag --vimgrep' " every match on line
"let g:ackprg = 'ag --nogroup --nocolor --column'
